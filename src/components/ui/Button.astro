---
export interface Props {
  variant?: 'primary' | 'secondary' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  href?: string;
  class?: string;
  type?: 'button' | 'submit' | 'reset';
  disabled?: boolean;
  loading?: boolean;
  'aria-label'?: string;
}

const {
  variant = 'primary',
  size = 'md',
  href,
  class: className = '',
  type = 'button',
  disabled = false,
  loading = false,
  'aria-label': ariaLabel,
  ...attrs
} = Astro.props;

const isDisabled = disabled || loading;
const Tag = href ? 'a' : 'button';
---

<Tag
  class:list={[
    'btn',
    `btn-${variant}`,
    `btn-${size}`,
    { 'btn-loading': loading },
    { 'btn-disabled': isDisabled },
    className
  ]}
  style={`
    font-weight: var(--font-weight-medium);
    border-radius: var(--radius-md);
    padding: ${size === 'sm' ? 'var(--space-2) var(--space-3)' : size === 'lg' ? 'var(--space-3) var(--space-6)' : 'calc(var(--space-2) + 2px) var(--space-4)'};
    font-size: ${size === 'sm' ? 'var(--font-size-sm)' : size === 'lg' ? 'var(--font-size-lg)' : 'var(--font-size-base)'};
    background: ${variant === 'primary' ? 'var(--gradient-primary)' : variant === 'secondary' ? 'var(--color-bg-primary)' : 'transparent'};
    color: ${variant === 'primary' ? 'white' : variant === 'secondary' ? 'var(--color-primary)' : 'var(--color-text-primary)'};
    border: ${variant === 'secondary' ? '2px solid var(--color-primary)' : '1px solid transparent'};
    box-shadow: ${variant === 'primary' ? 'var(--shadow-md)' : 'none'};
    transition: var(--transition-colors), var(--transition-transform), var(--transition-opacity);
    transition-timing-function: var(--ease-out-cubic);
    will-change: transform, background-color, box-shadow;
    opacity: ${loading || disabled ? '0.5' : '1'};
    cursor: ${loading ? 'wait' : disabled ? 'not-allowed' : 'pointer'};
  `}
  href={href}
  type={!href ? type : undefined}
  disabled={!href ? isDisabled : undefined}
  aria-label={ariaLabel}
  data-loading={loading}
  {...attrs}
>
  {loading && (
    <svg class="btn-spinner animate-spin w-4 h-4 mr-2" viewBox="0 0 24 24">
      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
      <path class="opacity-75" fill="currentColor" d="m4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
    </svg>
  )}
  <span class="btn-content">
    <slot />
  </span>
</Tag>

<style>
  /* Button Foundation with Design Tokens */
  .btn {
    display: inline-flex;
    align-items: center;
    justify-content: center;
    font-weight: var(--font-weight-medium);
    border-radius: var(--radius-md);
    border: 1px solid transparent;
    cursor: pointer;
    text-decoration: none;
    position: relative;
    overflow: hidden;
    transition: var(--transition-colors), var(--transition-transform), var(--transition-opacity);
    transition-timing-function: var(--ease-out-cubic);
    will-change: transform, background-color, box-shadow;
    backface-visibility: hidden;
  }

  /* Size Variants using Design Tokens */
  .btn-sm {
    padding: var(--space-2) var(--space-3);
    font-size: var(--font-size-sm);
  }

  .btn-md {
    padding: calc(var(--space-2) + 2px) var(--space-4);
    font-size: var(--font-size-base);
  }

  .btn-lg {
    padding: var(--space-3) var(--space-6);
    font-size: var(--font-size-lg);
  }

  /* Primary Variant with Gradient Background */
  .btn-primary {
    background: var(--gradient-primary);
    background-size: 200% 200%;
    color: white;
    box-shadow: var(--shadow-md);
    animation: gradientShift 8s ease infinite;
  }

  .btn-primary:hover {
    transform: translateY(-2px) scale(1.02);
    box-shadow: var(--shadow-lg);
    background-position: 100% 50%;
    will-change: transform, background-color, box-shadow;
  }

  .btn-primary:active {
    transform: translateY(-1px) scale(0.98);
    box-shadow: var(--shadow-md);
  }

  /* Secondary Variant with Border Styling */
  .btn-secondary {
    background-color: var(--color-bg-primary);
    color: var(--color-primary);
    border-color: var(--color-primary);
    border-width: 2px;
  }

  .btn-secondary:hover {
    background-color: var(--color-primary);
    color: white;
    transform: translateY(-1px) scale(1.02);
    box-shadow: var(--shadow-md);
    will-change: transform, background-color;
  }

  .btn-secondary:active {
    transform: translateY(0) scale(0.98);
  }

  /* Ghost Variant with Minimal Styling */
  .btn-ghost {
    background-color: transparent;
    color: var(--color-text-primary);
    border: none;
  }

  .btn-ghost:hover {
    background-color: var(--color-bg-secondary);
    transform: scale(1.02);
    will-change: transform, background-color;
  }

  .btn-ghost:active {
    transform: scale(0.98);
    background-color: var(--color-bg-tertiary);
  }

  /* Enhanced Focus States */
  .btn:focus-visible {
    outline: var(--focus-ring);
    outline-offset: var(--focus-ring-offset);
  }

  /* Loading States */
  .btn-loading {
    opacity: 0.8;
    cursor: wait;
    pointer-events: none;
  }

  .btn-spinner {
    animation: spin 1s linear infinite;
    margin-right: var(--space-2);
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* Gradient Animation for Primary Buttons */
  @keyframes gradientShift {
    0%, 100% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
  }

  /* Disabled State Styling */
  .btn-disabled,
  .btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    pointer-events: none;
    transform: none !important;
  }

  /* Sophisticated Animations and Micro-interactions */
  .btn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.5s ease;
  }

  .btn:hover::before {
    left: 100%;
  }

  /* Performance Optimizations */
  .btn {
    transform: translateZ(0);
  }

  /* Accessibility and Motion Preferences */
  @media (prefers-reduced-motion: reduce) {
    .btn,
    .btn:hover,
    .btn:active,
    .btn-spinner {
      transition: none;
      transform: none;
      animation: none;
    }

    .btn::before {
      display: none;
    }
  }

  /* Content and Spinner Styling */
  .btn-content {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .animate-spin {
    animation: spin 1s linear infinite;
  }

  /* Responsive Adjustments */
  @media (min-width: 768px) {
    .btn-lg {
      padding: var(--space-4) var(--space-8);
    }
  }

  /* High Contrast Support */
  @media (prefers-contrast: high) {
    .btn {
      border-width: 2px;
    }

    .btn-primary {
      border-color: var(--color-primary-dark);
    }

    .btn-ghost {
      border: 1px solid var(--color-border);
    }
  }

  /* Keyboard Interaction Enhancement */
  .btn:focus:not(:focus-visible) {
    outline: none;
  }

  /* Dark Mode Compatibility */
  @media (prefers-color-scheme: dark) {
    .btn-secondary {
      background-color: var(--color-bg-primary);
      border-color: var(--color-border);
    }

    .btn-ghost:hover {
      background-color: var(--color-bg-tertiary);
    }
  }
</style>

<script>
  // Handle keyboard activation and loading state interactions
  function initializeButtons() {
    const buttons = document.querySelectorAll('.btn');

    buttons.forEach((button) => {
      if (button.tagName.toLowerCase() === 'button') {
        // Handle keyboard activation (Enter/Space)
        button.addEventListener('keydown', (event) => {
          if (event.key === 'Enter' || event.key === ' ') {
            event.preventDefault();
            button.click();
          }
        });

        // Prevent default action when loading
        button.addEventListener('click', (event) => {
          const isLoading = button.getAttribute('data-loading') === 'true';
          if (isLoading) {
            event.preventDefault();
            event.stopPropagation();
          }
        });
      }
    });
  }

  // Initialize immediately and also on DOMContentLoaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeButtons);
  } else {
    initializeButtons();
  }

  // Make function available globally for testing
  window.initializeButtons = initializeButtons;
</script>