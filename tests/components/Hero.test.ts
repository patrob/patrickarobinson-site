import { describe, it, expect, beforeEach } from 'vitest';

/**
 * Hero Component TDD Tests
 *
 * Following RED-GREEN-REFACTOR methodology:
 * 1. RED: Write failing tests for basic functionality that doesn't exist yet
 * 2. GREEN: Write minimal code to make tests pass
 * 3. REFACTOR: Improve implementation while keeping tests green
 *
 * Tests focus on actual Hero.astro component functionality
 */

describe('Hero Component', () => {
  beforeEach(() => {
    document.body.innerHTML = '';
  });

  describe('Basic DOM Structure Tests', () => {
    it('should render as section element', () => {
      // Create minimal hero HTML that should be generated by Hero.astro
      document.body.innerHTML = `
        <section class="hero relative overflow-hidden py-24 md:py-32">
          <div class="hero-background absolute inset-0 -z-10">
            <div class="hero-gradient h-full w-full"></div>
          </div>
          <div class="container mx-auto px-4">
            <div class="hero-content flex flex-col max-w-4xl mx-auto text-center items-center">
              <h1 class="hero-title tracking-tight text-white">Welcome</h1>
            </div>
          </div>
        </section>
      `;

      const hero = document.querySelector('section');
      expect(hero).toBeTruthy();
      expect(hero?.classList.contains('hero')).toBe(true);
    });

    it('should have proper background structure', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-background absolute inset-0 -z-10">
            <div class="hero-gradient h-full w-full"></div>
            <div class="hero-pattern absolute inset-0"></div>
          </div>
          <div class="hero-content">
            <h1>Title</h1>
          </div>
        </section>
      `;

      const background = document.querySelector('.hero-background');
      const gradient = document.querySelector('.hero-gradient');
      const pattern = document.querySelector('.hero-pattern');

      expect(background).toBeTruthy();
      expect(gradient).toBeTruthy();
      expect(pattern).toBeTruthy();
    });

    it('should have proper content container structure', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="container mx-auto px-4">
            <div class="hero-content flex flex-col max-w-4xl mx-auto">
              <h1 class="hero-title">Content Title</h1>
            </div>
          </div>
        </section>
      `;

      const container = document.querySelector('.container');
      const content = document.querySelector('.hero-content');
      const title = document.querySelector('.hero-title');

      expect(container).toBeTruthy();
      expect(content).toBeTruthy();
      expect(title).toBeTruthy();
      expect(title?.textContent).toBe('Content Title');
    });
  });

  describe('Content Elements (RED - Testing Implementation)', () => {
    it('should display main title', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content">
            <h1 class="hero-title">My Hero Title</h1>
          </div>
        </section>
      `;

      const title = document.querySelector('.hero-title');
      expect(title).toBeTruthy();
      expect(title?.tagName.toLowerCase()).toBe('h1');
      expect(title?.textContent).toBe('My Hero Title');
    });

    it('should display subtitle when provided', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content">
            <span class="hero-subtitle">Featured Article</span>
            <h1 class="hero-title">Main Title</h1>
          </div>
        </section>
      `;

      const subtitle = document.querySelector('.hero-subtitle');
      expect(subtitle).toBeTruthy();
      expect(subtitle?.textContent).toBe('Featured Article');
    });

    it('should display description when provided', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content">
            <h1 class="hero-title">Title</h1>
            <p class="hero-description">This is a detailed description of the hero section content.</p>
          </div>
        </section>
      `;

      const description = document.querySelector('.hero-description');
      expect(description).toBeTruthy();
      expect(description?.textContent).toBe('This is a detailed description of the hero section content.');
    });

    it('should display call-to-action buttons when provided', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content">
            <h1 class="hero-title">Title</h1>
            <div class="hero-actions flex flex-wrap justify-center">
              <button class="btn btn-primary btn-lg">Get Started</button>
              <button class="btn btn-secondary btn-lg">Learn More</button>
            </div>
          </div>
        </section>
      `;

      const actions = document.querySelector('.hero-actions');
      const primaryCTA = actions?.querySelector('.btn-primary');
      const secondaryCTA = actions?.querySelector('.btn-secondary');

      expect(actions).toBeTruthy();
      expect(primaryCTA).toBeTruthy();
      expect(secondaryCTA).toBeTruthy();
      expect(primaryCTA?.textContent).toBe('Get Started');
      expect(secondaryCTA?.textContent).toBe('Learn More');
    });
  });

  describe('Alignment Support (RED - Missing Implementation)', () => {
    it('should support left alignment', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content text-left items-start">
            <h1 class="hero-title">Left Aligned</h1>
          </div>
        </section>
      `;

      const content = document.querySelector('.hero-content');
      expect(content?.classList.contains('text-left')).toBe(true);
      expect(content?.classList.contains('items-start')).toBe(true);
    });

    it('should support center alignment (default)', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content text-center items-center">
            <h1 class="hero-title">Center Aligned</h1>
          </div>
        </section>
      `;

      const content = document.querySelector('.hero-content');
      expect(content?.classList.contains('text-center')).toBe(true);
      expect(content?.classList.contains('items-center')).toBe(true);
    });

    it('should support right alignment', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content text-right items-end">
            <h1 class="hero-title">Right Aligned</h1>
          </div>
        </section>
      `;

      const content = document.querySelector('.hero-content');
      expect(content?.classList.contains('text-right')).toBe(true);
      expect(content?.classList.contains('items-end')).toBe(true);
    });
  });

  describe('Size Variants (RED - Testing Implementation)', () => {
    it('should support small size', () => {
      document.body.innerHTML = `
        <section class="hero py-16 md:py-20">
          <div class="hero-content">
            <h1 class="hero-title hero-title-sm">Small Hero</h1>
          </div>
        </section>
      `;

      const hero = document.querySelector('.hero');
      const title = document.querySelector('.hero-title-sm');

      expect(hero?.classList.contains('py-16')).toBe(true);
      expect(title).toBeTruthy();
    });

    it('should support medium size', () => {
      document.body.innerHTML = `
        <section class="hero py-20 md:py-24">
          <div class="hero-content">
            <h1 class="hero-title hero-title-md">Medium Hero</h1>
          </div>
        </section>
      `;

      const hero = document.querySelector('.hero');
      const title = document.querySelector('.hero-title-md');

      expect(hero?.classList.contains('py-20')).toBe(true);
      expect(title).toBeTruthy();
    });

    it('should support large size (default)', () => {
      document.body.innerHTML = `
        <section class="hero py-24 md:py-32">
          <div class="hero-content">
            <h1 class="hero-title hero-title-lg">Large Hero</h1>
          </div>
        </section>
      `;

      const hero = document.querySelector('.hero');
      const title = document.querySelector('.hero-title-lg');

      expect(hero?.classList.contains('py-24')).toBe(true);
      expect(title).toBeTruthy();
    });

    it('should support extra large size', () => {
      document.body.innerHTML = `
        <section class="hero py-32 md:py-40">
          <div class="hero-content">
            <h1 class="hero-title hero-title-xl">Extra Large Hero</h1>
          </div>
        </section>
      `;

      const hero = document.querySelector('.hero');
      const title = document.querySelector('.hero-title-xl');

      expect(hero?.classList.contains('py-32')).toBe(true);
      expect(title).toBeTruthy();
    });
  });

  describe('Background and Visual Effects (RED - Missing Implementation)', () => {
    it('should have gradient background', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-background">
            <div class="hero-gradient" style="background: var(--gradient-primary);"></div>
          </div>
          <div class="hero-content">
            <h1>Title</h1>
          </div>
        </section>
      `;

      const gradient = document.querySelector('.hero-gradient') as HTMLElement;
      expect(gradient).toBeTruthy();
      expect(gradient?.style.background).toContain('var(--gradient-primary)');
    });

    it('should have pattern overlay', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-background">
            <div class="hero-gradient"></div>
            <div class="hero-pattern"></div>
          </div>
          <div class="hero-content">
            <h1>Title</h1>
          </div>
        </section>
      `;

      const pattern = document.querySelector('.hero-pattern');
      expect(pattern).toBeTruthy();
    });

    it('should have proper z-index layering', () => {
      document.body.innerHTML = `
        <section class="hero relative">
          <div class="hero-background absolute inset-0 -z-10">
            <div class="hero-gradient"></div>
          </div>
          <div class="hero-content relative">
            <h1>Content on top</h1>
          </div>
        </section>
      `;

      const background = document.querySelector('.hero-background');
      const content = document.querySelector('.hero-content');

      expect(background?.classList.contains('-z-10')).toBe(true);
      expect(content?.classList.contains('relative')).toBe(true);
    });
  });

  describe('Accessibility Features (RED - Basic Requirements)', () => {
    it('should have proper heading hierarchy', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content">
            <span class="hero-subtitle">Subtitle</span>
            <h1 class="hero-title">Main Heading</h1>
            <p class="hero-description">Description</p>
          </div>
        </section>
      `;

      const subtitle = document.querySelector('.hero-subtitle');
      const title = document.querySelector('.hero-title');
      const description = document.querySelector('.hero-description');

      expect(subtitle?.tagName.toLowerCase()).toBe('span');
      expect(title?.tagName.toLowerCase()).toBe('h1');
      expect(description?.tagName.toLowerCase()).toBe('p');
    });

    it('should have proper text contrast on background', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content">
            <h1 class="hero-title text-white">White Text Title</h1>
            <p class="hero-description text-white/90">White description text</p>
          </div>
        </section>
      `;

      const title = document.querySelector('.hero-title');
      const description = document.querySelector('.hero-description');

      expect(title?.classList.contains('text-white')).toBe(true);
      expect(description?.classList.contains('text-white/90')).toBe(true);
    });

    it('should have accessible button labels', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content">
            <h1 class="hero-title">Title</h1>
            <div class="hero-actions">
              <button class="btn" aria-label="Get started with our service">Get Started</button>
              <button class="btn" aria-label="Learn more about features">Learn More</button>
            </div>
          </div>
        </section>
      `;

      const buttons = document.querySelectorAll('.hero-actions button');
      expect(buttons[0].getAttribute('aria-label')).toBe('Get started with our service');
      expect(buttons[1].getAttribute('aria-label')).toBe('Learn more about features');
    });
  });

  describe('Content Structure Validation (RED - Semantic HTML)', () => {
    it('should have proper content ordering', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content">
            <span class="hero-subtitle">First</span>
            <h1 class="hero-title">Second</h1>
            <p class="hero-description">Third</p>
            <div class="hero-actions">Fourth</div>
          </div>
        </section>
      `;

      const content = document.querySelector('.hero-content');
      const children = Array.from(content?.children || []);

      expect(children[0].classList.contains('hero-subtitle')).toBe(true);
      expect(children[1].classList.contains('hero-title')).toBe(true);
      expect(children[2].classList.contains('hero-description')).toBe(true);
      expect(children[3].classList.contains('hero-actions')).toBe(true);
    });

    it('should use section element for semantic structure', () => {
      document.body.innerHTML = `
        <section class="hero" role="banner">
          <div class="hero-content">
            <h1 class="hero-title">Main Site Title</h1>
          </div>
        </section>
      `;

      const hero = document.querySelector('section');
      expect(hero?.tagName.toLowerCase()).toBe('section');
      expect(hero?.getAttribute('role')).toBe('banner');
    });

    it('should have max-width constraint for content readability', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="container mx-auto px-4">
            <div class="hero-content max-w-4xl mx-auto">
              <h1 class="hero-title">Constrained Content</h1>
            </div>
          </div>
        </section>
      `;

      const content = document.querySelector('.hero-content');
      expect(content?.classList.contains('max-w-4xl')).toBe(true);
    });
  });

  describe('Responsive Behavior (RED - Missing Implementation)', () => {
    it('should have responsive padding classes', () => {
      document.body.innerHTML = `
        <section class="hero py-16 md:py-20 lg:py-24">
          <div class="hero-content">
            <h1>Responsive Hero</h1>
          </div>
        </section>
      `;

      const hero = document.querySelector('.hero');
      expect(hero?.classList.contains('py-16')).toBe(true);
      expect(hero?.classList.contains('md:py-20')).toBe(true);
      expect(hero?.classList.contains('lg:py-24')).toBe(true);
    });

    it('should have responsive title sizing', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="hero-content">
            <h1 class="hero-title text-3xl md:text-4xl lg:text-5xl">Responsive Title</h1>
          </div>
        </section>
      `;

      const title = document.querySelector('.hero-title');
      expect(title?.classList.contains('text-3xl')).toBe(true);
      expect(title?.classList.contains('md:text-4xl')).toBe(true);
      expect(title?.classList.contains('lg:text-5xl')).toBe(true);
    });

    it('should have responsive container padding', () => {
      document.body.innerHTML = `
        <section class="hero">
          <div class="container mx-auto px-4 md:px-6 lg:px-8">
            <div class="hero-content">
              <h1>Content</h1>
            </div>
          </div>
        </section>
      `;

      const container = document.querySelector('.container');
      expect(container?.classList.contains('px-4')).toBe(true);
      expect(container?.classList.contains('md:px-6')).toBe(true);
      expect(container?.classList.contains('lg:px-8')).toBe(true);
    });
  });

  describe('Custom Classes and Styling (RED - Missing Implementation)', () => {
    it('should accept custom className prop', () => {
      document.body.innerHTML = `
        <section class="hero custom-hero-class">
          <div class="hero-content">
            <h1 class="hero-title">Custom Styled</h1>
          </div>
        </section>
      `;

      const hero = document.querySelector('.hero');
      expect(hero?.classList.contains('custom-hero-class')).toBe(true);
    });

    it('should maintain base hero classes with custom classes', () => {
      document.body.innerHTML = `
        <section class="hero relative overflow-hidden py-24 md:py-32 custom-class">
          <div class="hero-content">
            <h1 class="hero-title">Title</h1>
          </div>
        </section>
      `;

      const hero = document.querySelector('.hero');
      expect(hero?.classList.contains('hero')).toBe(true);
      expect(hero?.classList.contains('relative')).toBe(true);
      expect(hero?.classList.contains('overflow-hidden')).toBe(true);
      expect(hero?.classList.contains('custom-class')).toBe(true);
    });
  });
});